name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test SSE Flask app (app.py)
      run: |
        python -c "import app; print('SSE Flask app imports successfully')"
        python -c "
        import app
        import threading
        import time
        import requests
        from multiprocessing import Process
        import sys
        import os
        
        def run_app():
            app.app.run(port=5001, debug=False)
        
        try:
            # Start app in background
            p = Process(target=run_app)
            p.start()
            time.sleep(3)  # Wait for app to start
            
            # Test basic endpoints
            response = requests.get('http://localhost:5001/api/leaderboard', timeout=5)
            if response.status_code == 200:
                print('âœ“ SSE app API endpoint test passed')
            else:
                print('âœ— SSE app API endpoint test failed')
                sys.exit(1)
        except Exception as e:
            print(f'âœ— SSE app test failed: {e}')
            sys.exit(1)
        finally:
            p.terminate()
            p.join()
        "
    
    - name: Test API Polling Flask app (appAPIPool.py)
      run: |
        python -c "import appAPIPool; print('API Polling Flask app imports successfully')"
        python -c "
        import appAPIPool
        import threading
        import time
        import requests
        from multiprocessing import Process
        import sys
        import os
        
        def run_app():
            appAPIPool.app.run(port=5002, debug=False)
        
        try:
            # Start app in background
            p = Process(target=run_app)
            p.start()
            time.sleep(3)  # Wait for app to start
            
            # Test basic endpoints
            response = requests.get('http://localhost:5002/api/leaderboard', timeout=5)
            if response.status_code == 200:
                print('âœ“ API Polling app API endpoint test passed')
            else:
                print('âœ— API Polling app API endpoint test failed')
                sys.exit(1)
        except Exception as e:
            print(f'âœ— API Polling app test failed: {e}')
            sys.exit(1)
        finally:
            p.terminate()
            p.join()
        "

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image for SSE version
      run: |
        docker build -t gaming-leaderboard-sse .
    
    - name: Test SSE Docker image
      run: |
        docker run -d -p 5000:5000 --name test-sse-container gaming-leaderboard-sse python app.py
        sleep 15
        curl -f http://localhost:5000/api/leaderboard || exit 1
        echo "âœ“ SSE Docker container test passed"
        docker stop test-sse-container
        docker rm test-sse-container
    
    - name: Build Docker image for API Polling version
      run: |
        docker build -t gaming-leaderboard-polling .
    
    - name: Test API Polling Docker image
      run: |
        docker run -d -p 5001:5000 --name test-polling-container gaming-leaderboard-polling python appAPIPool.py
        sleep 15
        curl -f http://localhost:5001/api/leaderboard || exit 1
        echo "âœ“ API Polling Docker container test passed"
        docker stop test-polling-container
        docker rm test-polling-container

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Deploy notification
      run: |
        echo "ðŸš€ Deployment step - Configure your deployment strategy here"
        echo "âœ“ Both SSE and API Polling versions tested successfully"
        echo "âœ“ Ready for production deployment"
        echo "- SSE version: Port 5000"
        echo "- API Polling version: Port 5001"